# This GitHub Actions workflow automates the release process for the Aura Telegram Bot.
# It triggers on a git tag push (e.g., v0.1.0), runs checks, builds a multi-platform
# Docker image, pushes it to Docker Hub, and creates a corresponding GitHub Release.

name: Release

# 1. TRIGGER: This workflow runs on new tags and can be manually dispatched.
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

# Prevents accidental duplicate runs for the same release tag.
concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  # ============================================================================
  # JOB: release
  # This single job handles all steps of the release process.
  # ============================================================================
  release:
    name: Build, Push, and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create the GitHub Release
    env:
      DOCKER_IMAGE: rabestro/aura-telegram-bot

    steps:
      # ------------------------------------------------------------------------
      # STEP 1: Check out the repository code
      # ------------------------------------------------------------------------
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      # ------------------------------------------------------------------------
      # STEP 2: Set up Docker Buildx for multi-platform builds
      # ------------------------------------------------------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ------------------------------------------------------------------------
      # STEP 3: Log in to Docker Hub
      # ------------------------------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ------------------------------------------------------------------------
      # STEP 4: Extract metadata for Docker image
      # ------------------------------------------------------------------------
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # v5.5.1
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          flavor: |
            latest=auto

      # ------------------------------------------------------------------------
      # STEP 5: Run Code Quality Checks
      # ------------------------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies and run checks
        run: |
          pip install uv
          uv sync --all-extras
          uv run poe check

      # ------------------------------------------------------------------------
      # STEP 6: Build and push the Docker image
      # ------------------------------------------------------------------------
      - name: Build and push Docker image
        uses: docker/build-push-action@v6 # v6.5.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

      # ------------------------------------------------------------------------
      # STEP 7: Create GitHub Release
      # ------------------------------------------------------------------------
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2 # v2.0.8
        with:
          generate_release_notes: true # Automatically create a changelog
          prerelease: ${{ contains(github.ref_name, '-') }}
