# This GitHub Actions workflow defines our Continuous Deployment (CD) pipeline.
# It runs automatically after a pull request is merged into the 'main' branch.
# Its purpose is to build the production Docker image and push it to Docker Hub.

name: Continuous Deployment

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      # This uses the secrets you must configure in your repository settings.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Set up QEMU for multi-platform builds
      # This allows our amd64 runner to emulate ARM architectures.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 4: Set up Docker Buildx
      # This is a Docker CLI plugin that enables multi-platform builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/aura-telegram-bot
          tags: |
            type=raw,value=latest
            type=sha,format=short

      # Step 5: Build and push multi-platform Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # We now specify all the architectures we want to build for.
          # This will make the image compatible with standard PCs, new RPi's, and older RPi's.
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
